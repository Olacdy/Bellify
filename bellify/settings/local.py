"""
Django settings for bellify project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

import environ
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

env = environ.Env()
env.read_env(f'{BASE_DIR}/.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'polymorphic',
    'bellify_bot',
    'youtube',
    'twitch',
    'django_cleanup.apps.CleanupConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bellify.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bellify.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

MEDIA_ROOT = f'{BASE_DIR}/media/'
MEDIA_URL = '/media/'

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

ABSOLUTE_URL = f'http://127.0.0.1:8000'

TOKEN = env.str('TELEGRAM_TOKEN')

ADMIN_ENDPOINT = env.str('ADMIN_ENDPOINT')

TG_WEBHOOK_ENDPOINT = env.str('TG_WEBHOOK_ENDPOINT')

PROVIDER_TOKEN = env.str('PROVIDER_TOKEN')

BELLIFY_LINK = 'https://t.me/BellifyBot'

# Celery section

CELERY_BROKER_URL = os.environ.get("REDIS_URL", "") + "/1"
CELERY_RESULT_BACKEND = os.environ.get("REDIS_URL", "") + "/1"
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

CELERY_BEAT_SCHEDULE = {
    "check_channels_for_video_youtube": {
        "task": "bellify.tasks.check_channels_for_new_video_youtube",
        "schedule": crontab(minute='0-57/3'),
    },
    "check_channels_for_live_stream_youtube": {
        "task": "bellify.tasks.check_channels_for_live_stream_youtube",
        "schedule": crontab(minute='1-58/3'),
    },
    "check_channels_for_live_stream_twitch": {
        "task": "bellify.tasks.check_channels_for_live_stream_twitch",
        "schedule": crontab(minute='2-59/3'),
    },
}

# Configuration settings

TWITCH_CLIENT_ID = env.str('TWITCH_CLIENT_ID')
TWITCH_CLIENT_SECRET = env.str('TWITCH_CLIENT_SECRET')

PAGINATION_SIZE = 5

SPLITTING_CHARACTER = 'Ã¸'

SESSION_CLIENT_COOKIES = {"CONSENT": "YES+cb"}

REQUESTS_DELAY = 0.05

# Upgrades section

CURRENCY = 'USD'
PREMIUM_PRICE = 400

CHANNELS_INFO = {
    'youtube': {
        'name': 'YouTube',
        'initial_number': 5,
        'premium_increase': 3,
        'increase_price': 50,
        'icon': 'ðŸŸ¥',
        'is_free': True
    },
    'twitch': {
        'name': 'Twitch',
        'initial_number': 0,
        'premium_increase': 3,
        'increase_price': 50,
        'icon': 'ðŸŸª',
        'is_free': False
    }
}

INCREASE_CHANNELS_AMOUNT = [1, 2, 3, 4, 5, 10]

# Help section

SAMPLE_CHANNELS_IDS = [
    'UCcAd5Np7fO8SeejB1FVKcYw',
    'UCNruPWfg4GUGw3RcwaKtsXQ',
    'UCbBiC9us6srqQytH22wD7Zw',
    'UC9XTzwex6rGLVUGS9cLKFLw',
    'UCBU8GKSd4NY0wCdcalbaltw',
    'UCggHsHce2n3vvbJf_8YKrMA',
    'UCgPClNr5VSYC3syrDUIlzLw'
]
