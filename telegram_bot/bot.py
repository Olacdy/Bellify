from django.conf import settings
from telegram import Bot, BotCommand, Update
from telegram.error import Unauthorized
from telegram.ext import CommandHandler, CallbackContext, CallbackQueryHandler, Updater, Dispatcher, MessageHandler, Filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from youtube.models import ChannelUserItem
from .utils import *
from telegram_notification.celery import app
import sys
from .inline_handler import inline_handler
import logging


@log_errors
def do_echo(update: Update, context: CallbackContext) -> None:
    lang_for_echo = {
        'en':
            [
                'This doesn\'t look like a URL ü§î. Try again.',
                'Do You want to change channel\'s name?'
            ],
        'ru':
            [
                '–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ URL ü§î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–∞–Ω–∞–ª–∞?'
            ]
    }

    p, _ = get_or_create_profile(
        update.message.chat_id, update.message.from_user.username, False)

    if 'add' in p.menu.split('‚ÄΩ'):
        user_text = update.message.text
        if is_channel_url(user_text):
            channel_id = scrape_id_by_url(user_text)

            keyboard = [
                [
                    InlineKeyboardButton(
                        'Yes' if p.language == 'en' else '–î–∞', callback_data=f'add‚ÄΩ{channel_id}‚ÄΩyes'),
                    InlineKeyboardButton(
                        'No' if p.language == 'en' else '–ù–µ—Ç', callback_data=f'add‚ÄΩ{channel_id}')
                ]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            set_menu_field(p)

            update.message.reply_text(
                text=lang_for_echo[p.language][1],
                parse_mode='HTML',
                reply_markup=reply_markup)
        else:
            update.message.reply_text(
                text=lang_for_echo[p.language][0],
                parse_mode='HTML'
            )
    elif 'name' in p.menu.split('‚ÄΩ'):
        user_text = update.message.text
        channel_id = p.menu.split('‚ÄΩ')[-1]
        add(channel_id, update, p, user_text)


@log_errors
def do_start(update: Update, context: CallbackContext) -> None:
    lang_for_start_command = {
        'en':
            [
                'Please, select a language.'
            ],
        'ru':
            [
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.'
            ]
    }
    p, _ = get_or_create_profile(update.message.chat_id,
                                 update.message.from_user.username)

    keyboard = [
        [
            InlineKeyboardButton(
                'üá¨üáß', callback_data=f'lang‚ÄΩen'),
            InlineKeyboardButton(
                'üá∑üá∫', callback_data=f'lang‚ÄΩru')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        text=lang_for_start_command[p.language][0],
        parse_mode='HTML',
        reply_markup=reply_markup)


@log_errors
def do_remove(update: Update, context: CallbackContext) -> None:
    lang_for_remove_command = {
        'en':
            [
                'Select a channel that You would like to remove.',
                'Sorry. There is no channels added right now, maybe try using /add command.'
            ],
        'ru':
            [
                '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.',
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é /add.'
            ]
    }

    p, _ = get_or_create_profile(
        update.message.chat_id, update.message.from_user.username)

    keyboard = []

    for channel in ChannelUserItem.objects.filter(user=p)[0: settings.PAGINATION_SIZE]:
        keyboard.append([
            InlineKeyboardButton(
                f'{channel.channel_title}', callback_data=f'remove‚ÄΩ{channel.channel.channel_id}')
        ])

    keyboard.append([InlineKeyboardButton('‚ùØ', callback_data=f'remove‚ÄΩpagination‚ÄΩ{1}')]) if len(
        ChannelUserItem.objects.filter(user=p)) > settings.PAGINATION_SIZE else None

    reply_markup = InlineKeyboardMarkup(keyboard)

    if ChannelUserItem.objects.filter(user=p):
        update.message.reply_text(
            text=lang_for_remove_command[p.language][0],
            parse_mode='HTML',
            reply_markup=reply_markup)
    else:
        update.message.reply_text(
            text=lang_for_remove_command[p.language][1],
            parse_mode='HTML',
            reply_markup=reply_markup)


@log_errors
def do_list(update: Update, context: CallbackContext) -> None:
    lang_for_list_command = {
        'en':
            [
                'List of Your added channels',
                'Sorry. There is no channels added right now, maybe try using /add command.'
            ],
        'ru':
            [
                '–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –∫–∞–Ω–∞–ª–æ–≤',
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é /add.',
            ]
    }

    p, _ = get_or_create_profile(
        update.message.chat_id, update.message.from_user.username)

    keyboard = []

    for channel in ChannelUserItem.objects.filter(user=p)[0: settings.PAGINATION_SIZE]:
        keyboard.append([
            InlineKeyboardButton(
                f'{channel.channel_title}', url=channel.channel.channel_url)
        ])

    keyboard.append([InlineKeyboardButton('‚ùØ', callback_data=f'list‚ÄΩpagination‚ÄΩ{1}')]) if len(
        ChannelUserItem.objects.filter(user=p)) > settings.PAGINATION_SIZE else None

    reply_markup = InlineKeyboardMarkup(keyboard)

    if ChannelUserItem.objects.filter(user=p):
        update.message.reply_text(
            text=lang_for_list_command[p.language][0],
            parse_mode='HTML',
            reply_markup=reply_markup)
    else:
        update.message.reply_text(
            text=lang_for_list_command[p.language][1],
            parse_mode='HTML',
            reply_markup=reply_markup)


@log_errors
def do_check(update: Update, context: CallbackContext) -> None:
    lang_for_check_command = {
        'en':
            [
                'Select a channel that You would like to check.',
                'Sorry. There is no channels added right now, maybe try using /add command.'
            ],
        'ru':
            [
                '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.',
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é /add.',
            ]
    }

    p, _ = get_or_create_profile(
        update.message.chat_id, update.message.from_user.username)

    keyboard = []

    for channel in ChannelUserItem.objects.filter(user=p)[0: settings.PAGINATION_SIZE]:
        keyboard.append([
            InlineKeyboardButton(
                f'{channel.channel_title}', callback_data=f'check‚ÄΩ{channel.channel.channel_id}')
        ])

    keyboard.append([InlineKeyboardButton('‚ùØ', callback_data=f'check‚ÄΩpagination‚ÄΩ{1}')]) if len(
        ChannelUserItem.objects.filter(user=p)) > settings.PAGINATION_SIZE else None

    reply_markup = InlineKeyboardMarkup(keyboard)

    if ChannelUserItem.objects.filter(user=p):
        update.message.reply_text(
            text=lang_for_check_command[p.language][0],
            parse_mode='HTML',
            reply_markup=reply_markup)
    else:
        update.message.reply_text(
            text=lang_for_check_command[p.language][1],
            parse_mode='HTML',
            reply_markup=reply_markup)


@log_errors
def do_lang(update: Update, context: CallbackContext) -> None:
    lang_for_lang_command = {
        'en':
            [
                'Please, select language.'
            ],
        'ru':
            [
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.'
            ]
    }
    p, _ = get_or_create_profile(update.message.chat_id,
                                 update.message.from_user.username)

    keyboard = [
        [
            InlineKeyboardButton(
                'üá¨üáß', callback_data=f'lang‚ÄΩen'),
            InlineKeyboardButton(
                'üá∑üá∫', callback_data=f'lang‚ÄΩru')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        text=lang_for_lang_command[p.language][0],
        parse_mode='HTML',
        reply_markup=reply_markup)


@log_errors
def do_help(update: Update, context: CallbackContext) -> None:
    lang_for_help = {
        'en':
            [
                'Notification Bot manual.\n\nTo start type /add command with some YouTube channel URL.\nNow, if everything went smoothlyü§û, You should have this channel in our database.\nTry to check whether it is true and type /list command.\nTo check if there is a new video on this channel try to use /check + name of the channel command.\nThis way You can get fresh information about the latest video from this channel,\nbut don`t worry You`ll be getting notifications automatically if a new video is out there.\nTo remove some channels, just type /remove + name of the channel command.\n\nNow You are free to add any channel from YouTube and this bot will take care of notifying You about new videos.\n\nTo contact developer follow this link: https://t.me/golovakanta'
            ],
        'ru':
            [
                'Notification Bot –º–∞–Ω—É–∞–ª.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–º–∞–Ω–¥–æ–π /add –ø–ª—é—Å —Å—Å—ã–ª–∫–∞ –Ω–∞ —é—Ç—É–± –∫–∞–Ω–∞–ª.\n–¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª–æ–º–∞–ª–æ—Å—åü§û, —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–∫ –ª–∏ —ç—Ç–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /list.\n–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–º–∞–Ω–¥–æ–π /check –ø–ª—é—Å –∏–º—è –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ.\n–¢–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ,\n–æ–¥–Ω–∞–∫–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –≤—ã –≤—Å–µ –µ—â–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –∑–∞–º–µ—Ç–∏–º –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –∫–∞–Ω–∞–ª–æ–≤.\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–∞–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /remove –ø–ª—é—Å –∏–º—è –∫–∞–Ω–∞–ª–∞.\n\n–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—ã –∑–Ω–∞–µ—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫–∞–Ω–∞–ª, –∞ –±–æ—Ç –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Ç–æ–º, —á—Ç–æ–±—ã —Å–Ω–∞–±–∂–∞—Ç—å –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ.\n–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: https://t.me/golovakanta'
            ]
    }

    chat_id = update.message.chat_id

    p, _ = get_or_create_profile(chat_id, update.message.from_user.username)

    update.message.reply_text(
        text=lang_for_help[p.language][0],
        parse_mode='HTML'
    )


@log_errors
def do_add(update: Update, context: CallbackContext) -> None:
    lang_for_add_command = {
        'en':
            [
                'Now send channel\'s URL.'
            ],
        'ru':
            [
                '–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å URL –∫–∞–Ω–∞–ª–∞.'
            ]
    }

    p, _ = get_or_create_profile(
        update.message.chat_id, update.message.from_user.username)

    set_menu_field(p, 'add')

    update.message.reply_text(
        text=lang_for_add_command[p.language][0],
        parse_mode='HTML'
    )


def set_up_commands(bot_instance: Bot) -> None:
    langs_with_commands = {
        'en': {
            'start': 'Start notification bot üöÄ',
            'add': '+ Channel url, name (optional)',
            'remove': '+ Channel name',
            'check': '+ Channel name',
            'list': 'List of saved channels',
            'help': 'Useguide for bot',
            'lang': 'For language change'
        },
        'ru': {
            'start': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üöÄ',
            'add': '+ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª, –∏–º—è –∫–∞–Ω–∞–ª–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
            'remove': '+ –ò–º—è –∫–∞–Ω–∞–ª–∞',
            'check': '+ –ò–º—è –∫–∞–Ω–∞–ª–∞',
            'list': '–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤',
            'help': '–°–ø—Ä–∞–≤–∫–∞',
            'lang': '–°–º–µ–Ω–∞ —è–∑—ã–∫–∞'
        }
    }

    bot_instance.delete_my_commands()
    for language_code in langs_with_commands:
        bot_instance.set_my_commands(
            language_code=language_code,
            commands=[
                BotCommand(command, description) for command, description in langs_with_commands[language_code].items()
            ]
        )


def setup_dispatcher(dp):
    """
    Adding handlers for events from Telegram
    """
    dp.add_handler(CommandHandler('add', do_add))
    dp.add_handler(CommandHandler('remove', do_remove))
    dp.add_handler(CommandHandler('check', do_check))
    dp.add_handler(CommandHandler('list', do_list))
    dp.add_handler(CommandHandler('help', do_help))
    dp.add_handler(CommandHandler('start', do_start))
    dp.add_handler(CommandHandler('lang', do_lang))
    dp.add_handler(MessageHandler(
        Filters.text & ~Filters.command, do_echo))
    dp.add_handler(CallbackQueryHandler(inline_handler))

    return dp


bot = Bot(settings.TOKEN)
try:
    TELEGRAM_BOT_USERNAME = bot.get_me()["username"]
except Unauthorized:
    sys.exit(1)
n_workers = 0 if settings.DEBUG else 4
dispatcher = setup_dispatcher(Dispatcher(
    bot, update_queue=None, workers=n_workers, use_context=True))


def run_pooling():
    """ Run bot in pooling mode """
    updater = Updater(settings.TOKEN, use_context=True)

    dp = updater.dispatcher
    dp = setup_dispatcher(dp)

    bot_pool = Bot(settings.TOKEN)

    if settings.DEBUG:
        set_up_commands(bot_pool)
    bot_info = bot_pool.get_me()
    bot_link = f"https://t.me/" + bot_info["username"]

    print(f"Pooling of '{bot_link}' started")

    updater.start_polling()
    updater.idle()


@app.task(ignore_result=True)
def process_telegram_event(update_json):
    global bot, dispatcher
    update = Update.de_json(update_json, bot)
    dispatcher.process_update(update)
